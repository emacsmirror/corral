[[http://melpa.org/#/corral][file:http://melpa.org/packages/corral-badge.svg]]
* Corral
** What it is
A lightweight set of commands that enable you to quickly wrap parentheses, brackets, quotes, and other delimiters around text.

** What it isn't
A replacement to a fully-featured structural editing mode for lisp, such as paredit.  Corral prioritizes speed and simplicity, and should work for any language.

** Examples
[[./corral-example-c.gif]] \\
[[./corral-example-el.gif]]

** Installation
Corral can be found on melpa, and should be installed from there.  To install it manually instead, save corral.el to your computer and add this to your init file:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/path/to/corral/directory/")
(require 'corral)
#+END_SRC

** Usage
Call a command once to wrap the delimiters around the sexp at point.  Repeated calls of the same command, backward or forward, will shift the delimiters in the respective direction, corralling more text.

The wrapping algorithm tries to operate on these principles:
- If the point is over a word, it will always wrap around that word.
- Otherwise, =backward= and =forward= commands should have different effects.
- Symbols will not be directly corraled.

If there are any discrepancies, feel free to report it on the issue tracker.

To use these commands, just bind them to keys of your choosing.  Here are some example keybindings:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-9") 'corral-parentheses-backward)
(global-set-key (kbd "M-0") 'corral-parentheses-forward)
(global-set-key (kbd "M-[") 'corral-brackets-backward)
(global-set-key (kbd "M-]") 'corral-brackets-forward)
(global-set-key (kbd "M-{") 'corral-braces-backward)
(global-set-key (kbd "M-}") 'corral-braces-forward)
(global-set-key (kbd "M-\"") 'corral-double-quotes-backward)
#+END_SRC
** Settings
*** Keep point position instead of following delimiters
This is controlled by the variable =corral-preserve-point=, which can be set manually or through customize.
#+BEGIN_SRC emacs-lisp
(setq corral-preserve-point t)
#+END_SRC
*** Configure how corral handles punctuation/symbols
Corral can be configured to use special syntax rules, which are set through the variable =corral-syntax-rules=. This variable is a list of syntax rules, which follow the same syntax as =modify-syntax-entry=.

For example, if you want to have =#= and =*= be treated as symbols so that they are wrapped as part of the word:
#+BEGIN_SRC emacs-lisp
(setq corral-syntax-rules '((?# "_")
                            (?* "_"))
#+END_SRC
